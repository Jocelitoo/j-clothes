generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Admin
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String   @unique
  email          String   @unique
  emailVerified  Boolean  @default(false)
  hashedPassword String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  role           Role     @default(User)

  orders  Order[]
  reviews Review[]
  Otp     Otp[]
}

type CartItemProps {
  id       String
  name     String
  price    Float
  quantity Int
  size     String
  inStock  Int
  imageUrl String
}

type Address {
  city    String
  country String
  line1   String
  line2   String
  cep     String
  state   String
}

model Order {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  userId          String          @db.ObjectId
  amount          Float
  currency        String
  status          String
  deliveryStatus  String?
  createdAt       DateTime        @default(now())
  paymentIntentId String          @unique
  products        CartItemProps[]
  address         Address?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type Variation {
  size    String
  inStock Int
}

type Image {
  url String
  id  String
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  price       Float
  description String
  category    String
  createdAt   DateTime    @default(now())
  variations  Variation[]
  images      Image[]

  reviews Review[]
}

model Review {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  productId String @db.ObjectId
  userName  String
  text      String
  rating    Int

  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  otp       String
  for       String
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
